{"ts":1354967788112,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\nnamespace daliaIT\\co3;\nuse Exception,\n    OutOfRangeException;\nabstract class Core extends Inject\n{\n    protected \n        $conf; \n    private\n        $confCache = array();\n        \n    public function __construct(){\n        $this->onPluginSet = Event::inject(array('owner' => $this));\n    }\n    \n    public abstract function boot($config);\n    \n    public function getConf(){\n        return $this->conf;\n    }\n    \n    public function getConfValue($path){\n        if(! isset($this->confCache[$path])){\n            $parts = explode('/',$path);\n            $current = $this->getConf();\n            foreach($parts as $index => $key){\n                if(! isset($current[$key])){\n                    return null;      \n                }\n                $current = $current[$key];\n            }\n            $this->confCache[$path] = $current;\n        }\n        return $this->confCache[$path];\n    }\n    \n    public function setConfValue($path, $value){\n        $this->confCache[$path] = $value;\n        $parts = explode('/',$path);\n        $current = $this->getConf();\n        $leave = array_pop($parts);\n        foreach($parts as $index => $key){\n            if(! isset($current[$key])){\n                $current[$key] = array();       \n            } else {\n                if(!is_array(current)){\n                    throw new OutOfRangeExcedption(implode(\"\\n\",\n                        \"Invalid config key. \",\n                        \"Element is no array.\",\n                        \"Path: $path\",\n                        \"Key: $key\",\n                        \"Index $index\"\n                    ));\n                }\n            }\n            $current = $current[$key];\n        }\n        $current[$leave] = $value;\n        return $this;\n    }\n    //plugins\n    protected $plugins = array();\n    public function pluginExists( $name ){\n        return isset($this->plugins[$name]);   \n    }\n    \n    public function getPlugin($name){\n        if( $this->pluginExists( $name ) ){\n            return $this->plugins[$name];\n        } else {\n            throw new  OutOfRangeException(\"Unkown Plugin '$name'\");\n        }\n    }\n    \n    public function setPlugin($name, IPlugin $plugin){\n        $old = ( isset($this->plugins[$name]) )\n            ? $this->plugins[$name]\n            : null;\n        if($plugin !== $old){\n            $this->plugins[$name] = $plugin;\n            $plugin->setCore( $this );\n            $plugin->init( $name );\n            $this->onPluginSet->trigger(\n                ValueChangedEventArgs::inject(array(\n                    'oldValue'  => $old,\n                    'newValue'  => $plugin,\n                    'name'      => $name\n                ))\n            );\n        }\n        return $this;\n    }\n    \n    public function getPlugins(){\n        return $this->plugins;\n    }\n    \n    public function __get($name){\n        return $this->getPlugin($name);\n    }\n    \n    //events\n    protected\n        $onPluginSet;\n        \n    public function getOnPluginSet(){\n        return $this->onPluginSet->getHandle();\n    }\n}\n?>"]],"start1":0,"start2":0,"length1":0,"length2":3047}]],"length":3047}
